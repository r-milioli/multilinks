generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  userAgent    String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String       @id @default(cuid())
  name                 String?
  email                String       @unique
  emailVerified        DateTime?
  image                String?
  username             String?      @unique
  bio                  String?
  title                String?
  avatar               String?
  password             String?
  themeSettings        Json?        @default("{}")
  privacySettings      Json?        @default("{}")
  notificationSettings Json?        @default("{}")
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  integrationSettings  Json?        @default("{}")
  lastLoginAt          DateTime?
  legalLinksSettings   Json?        @default("{}")
  role                 UserRole     @default(USER)
  status               UserStatus   @default(ACTIVE)
  accounts             Account[]
  analytics            Analytics[]
  auditLogs            AuditLog[]
  forms                Form[]
  links                Link[]
  sessions             Session[]
  socialLinks          SocialLink[]
  userStats            UserStats?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([token])
  @@index([expires])
}

model Link {
  id          String      @id @default(cuid())
  title       String
  url         String
  description String?
  image       String?
  type        LinkType    @default(NORMAL)
  position    Int
  active      Boolean     @default(true)
  clickCount  Int         @default(0)
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  formId      String?
  useForm     Boolean     @default(false)
  analytics   Analytics[]
  formLinks   FormLink[]
  leads       Lead[]
  form        Form?       @relation(fields: [formId], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, position])
  @@index([userId, type])
}

model SocialLink {
  id       String @id @default(cuid())
  platform String
  url      String
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
}

model Analytics {
  id        String   @id @default(cuid())
  linkId    String?
  userId    String
  clickedAt DateTime @default(now())
  country   String?
  device    String?
  userAgent String?
  ipAddress String?
  link      Link?    @relation(fields: [linkId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, clickedAt])
  @@index([linkId, clickedAt])
}

model Form {
  id                    String     @id @default(cuid())
  userId                String
  title                 String
  description           String?
  uniqueId              String     @unique
  fields                Json
  buttonText            String     @default("Enviar")
  buttonActive          Boolean    @default(true)
  redirectUrl           String?
  followLinkDestination Boolean    @default(false)
  active                Boolean    @default(true)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  formLinks             FormLink[]
  leads                 Lead[]
  links                 Link[]

  @@index([userId, active])
  @@index([uniqueId])
}

model Lead {
  id        String   @id @default(cuid())
  formId    String
  linkId    String?
  data      Json
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  link      Link?    @relation(fields: [linkId], references: [id])

  @@index([formId, createdAt])
  @@index([linkId, createdAt])
}

model FormLink {
  id     String @id @default(cuid())
  formId String
  linkId String
  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
  link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@unique([formId, linkId])
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  category    String   @default("general")
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([isPublic])
}

model UserStats {
  id                 String    @id @default(cuid())
  userId             String    @unique
  totalLinks         Int       @default(0)
  totalClicks        Int       @default(0)
  totalForms         Int       @default(0)
  totalLeads         Int       @default(0)
  lastActivityAt     DateTime?
  accountAge         Int       @default(0)
  subscriptionPlan   String?   @default("free")
  subscriptionStatus String?   @default("active")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lastActivityAt])
  @@index([totalClicks])
}

model Subscription {
  id            String    @id @default(cuid())
  userId        String    @unique
  planId        String
  planName      String
  amount        Decimal   @db.Decimal(10, 2)
  currency      String    @default("BRL")
  status        String
  startDate     DateTime
  endDate       DateTime?
  billingCycle  String    @default("monthly")
  paymentMethod String?
  lastPaymentAt DateTime?
  nextPaymentAt DateTime?
  trialEndsAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([status])
  @@index([nextPaymentAt])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  resource    String
  resourceId  String?
  description String?
  oldData     Json?
  newData     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id])

  @@index([action, resource])
  @@index([createdAt])
  @@index([userId, createdAt])
}

model Payment {
  id              String    @id @default(cuid())
  userId          String
  subscriptionId  String?
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("BRL")
  status          String
  paymentMethod   String
  transactionId   String?
  gatewayResponse Json?
  processedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([processedAt])
  @@index([status])
  @@index([userId])
}

enum LinkType {
  NORMAL
  PRODUCT
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}