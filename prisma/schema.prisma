generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  userAgent    String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String       @unique
  emailVerified   DateTime?
  image           String?
  username        String?      @unique
  bio             String?
  title           String?
  avatar          String?
  password        String?
  themeSettings   Json?        @default("{}")
  privacySettings Json?        @default("{}")
  notificationSettings Json?   @default("{}")
  integrationSettings Json?    @default("{}")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  accounts        Account[]
  analytics       Analytics[]
  links           Link[]
  sessions        Session[]
  socialLinks     SocialLink[]
  forms           Form[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Link {
  id         String      @id @default(cuid())
  title      String
  url        String
  description String?
  image      String?     // URL da imagem do link
  type       LinkType    @default(NORMAL) // NORMAL ou PRODUCT
  position   Int
  active     Boolean     @default(true)
  clickCount Int         @default(0)
  useForm    Boolean     @default(false)
  formId     String?
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  analytics  Analytics[]
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  leads      Lead[]
  formLinks  FormLink[]
  form       Form?       @relation(fields: [formId], references: [id])

  @@index([userId, position])
  @@index([userId, type])
}

enum LinkType {
  NORMAL
  PRODUCT
}

model SocialLink {
  id       String @id @default(cuid())
  platform String
  url      String
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
}

model Analytics {
  id        String   @id @default(cuid())
  linkId    String?
  userId    String
  clickedAt DateTime @default(now())
  country   String?
  device    String?
  userAgent String?
  ipAddress String?
  link      Link?    @relation(fields: [linkId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, clickedAt])
  @@index([linkId, clickedAt])
}

model Form {
  id                   String      @id @default(cuid())
  userId               String
  title                String
  description          String?
  uniqueId             String      @unique
  fields               Json        // Array de FormField
  buttonText           String      @default("Enviar")
  buttonActive         Boolean     @default(true)
  redirectUrl          String?
  followLinkDestination Boolean    @default(false)
  active               Boolean     @default(true)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  leads                Lead[]
  formLinks            FormLink[]
  links                Link[]

  @@index([userId, active])
  @@index([uniqueId])
}

model Lead {
  id        String   @id @default(cuid())
  formId    String
  linkId    String?
  data      Json     // Dados do formul√°rio
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  link      Link?    @relation(fields: [linkId], references: [id])

  @@index([formId, createdAt])
  @@index([linkId, createdAt])
}

model FormLink {
  id      String @id @default(cuid())
  formId  String
  linkId  String
  form    Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
  link    Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@unique([formId, linkId])
}
