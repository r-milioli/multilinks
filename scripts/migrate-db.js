#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');
const { execSync } = require('child_process');

const prisma = new PrismaClient();

async function checkColumnExists(tableName, columnName) {
  try {
    const result = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = ${tableName} 
      AND column_name = ${columnName}
    `;
    return result.length > 0;
  } catch (error) {
    console.log(`‚ö†Ô∏è Erro ao verificar coluna ${columnName} na tabela ${tableName}:`, error.message);
    return false;
  }
}

async function migrateDatabase() {
  try {
    console.log('üöÄ Iniciando migra√ß√£o do banco de dados...');
    
    // Verificar se a coluna legalLinksSettings existe
    const hasLegalLinksSettings = await checkColumnExists('User', 'legalLinksSettings');
    
    if (!hasLegalLinksSettings) {
      console.log('üìù Coluna legalLinksSettings n√£o encontrada. Aplicando migra√ß√£o...');
      
      try {
        // Aplicar migra√ß√£o usando Prisma
        execSync('npx prisma db push --accept-data-loss', { stdio: 'inherit' });
        console.log('‚úÖ Migra√ß√£o aplicada com sucesso!');
      } catch (error) {
        console.error('‚ùå Erro ao aplicar migra√ß√£o:', error.message);
        throw error;
      }
    } else {
      console.log('‚úÖ Coluna legalLinksSettings j√° existe. Nenhuma migra√ß√£o necess√°ria.');
    }
    
    // Verificar se h√° outras migra√ß√µes pendentes
    try {
      execSync('npx prisma migrate status', { stdio: 'pipe' });
      console.log('‚úÖ Todas as migra√ß√µes est√£o atualizadas.');
    } catch (error) {
      console.log('‚ö†Ô∏è H√° migra√ß√µes pendentes. Aplicando...');
      try {
        execSync('npx prisma migrate deploy', { stdio: 'inherit' });
        console.log('‚úÖ Migra√ß√µes pendentes aplicadas com sucesso!');
      } catch (migrateError) {
        console.log('‚ö†Ô∏è Erro ao aplicar migra√ß√µes. Tentando db push...');
        execSync('npx prisma db push', { stdio: 'inherit' });
        console.log('‚úÖ Schema sincronizado com sucesso!');
      }
    }
    
    console.log('üéâ Migra√ß√£o do banco de dados conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar migra√ß√£o se este script for chamado diretamente
if (require.main === module) {
  migrateDatabase();
}

module.exports = { migrateDatabase };
