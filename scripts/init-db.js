#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');
const { execSync } = require('child_process');

const prisma = new PrismaClient();

async function checkDatabaseExists() {
  try {
    // Tentar conectar e fazer uma query simples
    await prisma.$queryRaw`SELECT 1`;
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è Banco de dados n√£o est√° acess√≠vel:', error.message);
    return false;
  }
}

async function checkTableExists(tableName) {
  try {
    const result = await prisma.$queryRaw`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = ${tableName}
      );
    `;
    return result[0].exists;
  } catch (error) {
    console.log(`‚ö†Ô∏è Erro ao verificar tabela ${tableName}:`, error.message);
    return false;
  }
}

async function checkColumnExists(tableName, columnName) {
  try {
    const result = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_schema = 'public'
      AND table_name = ${tableName} 
      AND column_name = ${columnName}
    `;
    return result.length > 0;
  } catch (error) {
    console.log(`‚ö†Ô∏è Erro ao verificar coluna ${columnName} na tabela ${tableName}:`, error.message);
    return false;
  }
}

async function initializeDatabase() {
  try {
    console.log('üöÄ Inicializando banco de dados MultiLink...');
    
    // Verificar se o banco est√° acess√≠vel
    if (!await checkDatabaseExists()) {
      console.log('‚ùå N√£o foi poss√≠vel conectar ao banco de dados');
      process.exit(1);
    }
    
    console.log('‚úÖ Conex√£o com banco de dados estabelecida');
    
    // Verificar se as tabelas principais existem
    const hasUserTable = await checkTableExists('User');
    
    if (!hasUserTable) {
      console.log('üìù Tabelas n√£o encontradas. Aplicando schema completo...');
      try {
        execSync('npx prisma db push --accept-data-loss', { stdio: 'inherit' });
        console.log('‚úÖ Schema aplicado com sucesso!');
        
        // Executar seed se dispon√≠vel
        try {
          console.log('üå± Executando seed do banco de dados...');
          execSync('npx prisma db seed', { stdio: 'inherit' });
          console.log('‚úÖ Seed executado com sucesso!');
        } catch (seedError) {
          console.log('‚ö†Ô∏è Seed n√£o executado (normal se n√£o configurado):', seedError.message);
        }
      } catch (error) {
        console.error('‚ùå Erro ao aplicar schema:', error.message);
        throw error;
      }
    } else {
      console.log('‚úÖ Tabelas principais encontradas');
      
      // Verificar se a coluna legalLinksSettings existe
      const hasLegalLinksSettings = await checkColumnExists('User', 'legalLinksSettings');
      
      if (!hasLegalLinksSettings) {
        console.log('üìù Coluna legalLinksSettings n√£o encontrada. Aplicando migra√ß√£o...');
        try {
          execSync('npx prisma db push', { stdio: 'inherit' });
          console.log('‚úÖ Migra√ß√£o aplicada com sucesso!');
        } catch (error) {
          console.error('‚ùå Erro ao aplicar migra√ß√£o:', error.message);
          throw error;
        }
      } else {
        console.log('‚úÖ Coluna legalLinksSettings j√° existe');
      }
      
      // Verificar se h√° outras migra√ß√µes pendentes
      try {
        execSync('npx prisma migrate status', { stdio: 'pipe' });
        console.log('‚úÖ Todas as migra√ß√µes est√£o atualizadas');
      } catch (error) {
        console.log('‚ö†Ô∏è Verificando migra√ß√µes pendentes...');
        try {
          execSync('npx prisma migrate deploy', { stdio: 'inherit' });
          console.log('‚úÖ Migra√ß√µes pendentes aplicadas com sucesso!');
        } catch (migrateError) {
          console.log('‚ö†Ô∏è Erro ao aplicar migra√ß√µes. Sincronizando schema...');
          execSync('npx prisma db push', { stdio: 'inherit' });
          console.log('‚úÖ Schema sincronizado com sucesso!');
        }
      }
    }
    
    console.log('üéâ Inicializa√ß√£o do banco de dados conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a inicializa√ß√£o:', error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar inicializa√ß√£o se este script for chamado diretamente
if (require.main === module) {
  initializeDatabase();
}

module.exports = { initializeDatabase };
