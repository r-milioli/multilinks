/**
 * Script para testar o fluxo completo de pre√ßos
 */

const fetch = globalThis.fetch

async function testCompleteFlow() {
  try {
    console.log('üß™ Testando fluxo completo de pre√ßos...\n')

    // 1. Buscar dados dos planos
    console.log('1Ô∏è‚É£ Buscando dados dos planos da API...')
    const response = await fetch('http://localhost:3000/api/public/pricing')
    const result = await response.json()

    if (!result.success) {
      console.log('‚ùå Erro ao buscar dados dos planos:', result.error)
      return
    }

    console.log('‚úÖ Dados obtidos com sucesso!')
    console.log('üìä Planos dispon√≠veis:')
    
    result.data.plans.forEach(plan => {
      console.log(`  - ${plan.name}: ${plan.price}`)
    })

    // 2. Simular sele√ß√£o de planos
    console.log('\n2Ô∏è‚É£ Simulando sele√ß√£o de planos...')
    
    const testPlans = result.data.plans.filter(plan => plan.id !== 'gratuito')
    
    testPlans.forEach(plan => {
      // Extrair pre√ßo num√©rico
      let price = 0
      if (typeof plan.price === 'string') {
        const priceMatch = plan.price.match(/[\d,]+/)
        if (priceMatch) {
          price = parseFloat(priceMatch[0].replace(',', '.'))
        }
      } else if (typeof plan.price === 'number') {
        price = plan.price
      }

      const checkoutUrl = `/checkout?plan=${plan.id}&price=${price}`
      console.log(`üîó ${plan.name}: ${checkoutUrl}`)
      
      // Simular parse da URL
      const url = new URL(`http://localhost:3000${checkoutUrl}`)
      const planId = url.searchParams.get('plan')
      const priceParam = url.searchParams.get('price')
      
      console.log(`   üìã Plano ID: ${planId}`)
      console.log(`   üí∞ Pre√ßo da URL: ${priceParam}`)
      console.log(`   ‚úÖ Pre√ßo v√°lido: ${parseFloat(priceParam) > 0 ? 'Sim' : 'N√£o'}`)
    })

    // 3. Verificar consist√™ncia
    console.log('\n3Ô∏è‚É£ Verificando consist√™ncia dos dados...')
    
    const expectedPrices = {
      pro: 25,
      business: 40
    }

    let allCorrect = true
    testPlans.forEach(plan => {
      let actualPrice = 0
      if (typeof plan.price === 'string') {
        const priceMatch = plan.price.match(/[\d,]+/)
        if (priceMatch) {
          actualPrice = parseFloat(priceMatch[0].replace(',', '.'))
        }
      } else if (typeof plan.price === 'number') {
        actualPrice = plan.price
      }

      const expectedPrice = expectedPrices[plan.id]
      const isCorrect = actualPrice === expectedPrice
      
      console.log(`üìä ${plan.name}:`)
      console.log(`   Esperado: R$ ${expectedPrice}`)
      console.log(`   Atual: R$ ${actualPrice}`)
      console.log(`   ${isCorrect ? '‚úÖ' : '‚ùå'} ${isCorrect ? 'Correto' : 'Incorreto'}`)
      
      if (!isCorrect) allCorrect = false
    })

    // 4. Resultado final
    console.log('\n4Ô∏è‚É£ Resultado final:')
    if (allCorrect) {
      console.log('üéâ Todos os pre√ßos est√£o corretos!')
      console.log('‚úÖ O fluxo de pre√ßos est√° funcionando perfeitamente')
      console.log('‚úÖ Os dados do banco est√£o sendo usados corretamente')
      console.log('‚úÖ O checkout receber√° os pre√ßos corretos')
    } else {
      console.log('‚ùå Alguns pre√ßos est√£o incorretos')
      console.log('üîß Verifique os dados na tabela SystemSettings')
    }

    console.log('\nüéØ Teste conclu√≠do!')

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message)
  }
}

testCompleteFlow()
